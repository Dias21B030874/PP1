#include <iostream>
#include <vector>
using namespace std;

bool flag;
int n, m, i, j;
int was[100001];
vector<int> ans, g[100001], revg[100001];

void cycle(int v) {
  if(flag) return;
  was[v] = 1;
  for(auto u : g[v]) {
    if(was[u] == 1) {
      flag = true;
      return;
    }else if(!was[u]) cycle(u);
  }
  was[v] = 2;
}

void dfs(int v) {
  was[v] = 1;
  for(auto u : g[v]) {
    if(!was[u]) dfs(u);
  }
  ans.push_back(v);
}

int main() {
  ios::sync_with_stdio(false);
  cin.tie(0);
  cout.tie(0);
  cin >> n >> m;
  for(int _ = 0; _ < m; _++) {
    cin >> i >> j;
    g[i].push_back(j);
    revg[j].push_back(i);
  }
  for(int i = 1; i <= n; i++) {
    if(!was[i]) cycle(i);
  }
  if(flag) {
    cout << "Impossible";
    return 0;
  }
  cout << "Possible\n";
  for(int i = 1; i <= n; i++) was[i] = 0;
  for(int i = 1; i <= n; i++) {
    if(!was[i]) dfs(i);
  }
  for(int i = ans.size() - 1; i >= 0; i--) cout << ans[i] << " ";
  return 0;
}