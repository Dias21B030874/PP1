#include <iostream>
#include <vector>
#include <map>
using namespace std;

const int N = 100000, p = 31;
bool can[N];
int n;
long long t, curh;
long long p_pow[N], hs[N];
string s, part;
map<int, int> m;
map<int, int>::iterator it;

int main() {
  p_pow[0] = 1;
  cin >> s;
  
  for(int i = 1; i < N; i++) p_pow[i] = p_pow[i - 1] * p;
  cin >> n;
  for(int i = 0; i < s.size(); i++) {
    hs[i] = (s[i] - 'a' + 1) * p_pow[i];
    if(i) hs[i] += hs[i - 1];
  }
  for(int _ = 0; _ < n; _++) {
    cin >> part;
    t = 0;
    for(int i = 0; i < part.size(); i++) t += (part[i] - 'a' + 1) * p_pow[i];
    for(int i = 0; i + part.size() - 1 < s.size(); i++) {
      curh = hs[i + part.size() - 1];
      if(i) curh -= hs[i - 1];
      if(curh == t * p_pow[i]) {
        if(m[i]) m[i] = max(m[i], (int)(i + part.size() - 1));
        else m[i] = i + part.size() - 1;
      }
    }
  }
  for(it = m.begin(); it != m.end(); it++) {
    for(int i = it->first; i <= it->second; i++) can[i] = true;
  }
  for(int i = 0; i < s.size(); i++) {
    if(!can[i]) {
      cout << "NO";
      return 0;
    }
  }
  cout << "YES";
  return 0;
}